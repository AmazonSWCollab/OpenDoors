{"ast":null,"code":"var _jsxFileName = \"/Users/nolandelligatta/Documents/School/AMAZON/OpenDoors/open_doors/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet App = () => {\n  _s();\n  // Very basic way of getting data from the backend\n  // More detailed and specific methods will be dev'd later\n  const [backendData, setBackendData] = useState([{}]);\n  useEffect(() => {\n    fetch(\"/api\").then(res => res.json()).then(data => {\n      setBackendData(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: typeof backendData.businesses == \"undefined\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) : backendData.businesses.map((business, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: business.name\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Located at:\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [business.address, \" \"]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [business.city, \", \", business.state, \" \", business.zipcode]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"lSbdPEQgG/af9fOvqlnzEvHwb4Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","backendData","setBackendData","fetch","then","res","json","data","children","businesses","fileName","_jsxFileName","lineNumber","columnNumber","map","business","i","name","address","city","state","zipcode","_c","$RefreshReg$"],"sources":["/Users/nolandelligatta/Documents/School/AMAZON/OpenDoors/open_doors/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\nlet App = () => {\n  // Very basic way of getting data from the backend\n  // More detailed and specific methods will be dev'd later\n  const [backendData, setBackendData] = useState([{}]) \n  useEffect(() => {\n    fetch(\"/api\").then(\n      res => res.json()\n    ).then(\n      data => {\n        setBackendData(data)\n      }\n    )\n  }, [])\n\n  return (\n    <div>\n\n      {/* THIS ENTIRE <div> BLOCK IS A TEST BLOCK. RUN ONCE AND IF EVERYTHING \n          RUNS FINE, THEN YOU CAN DELETE IT AND START CREATING THE PAGE   */}\n\n      {(typeof backendData.businesses == \"undefined\") ? ( \n        <p>Loading...</p> \n      ) : ( \n        backendData.businesses.map((business, i) => (\n          <>\n            <h1 key={i}>{ business.name }</h1>\n            <p key={i}>Located at:</p>\n            <p key={i}>{ business.address } </p>\n            <p key={i}>{ business.city }, { business.state } { business.zipcode }</p>\n          </>\n        ))\n      )}\n\n    </div>\n  )\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,IAAIC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpDD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,MAAM,CAAC,CAACC,IAAI,CAChBC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAClB,CAACF,IAAI,CACJG,IAAI,IAAI;MACNL,cAAc,CAACK,IAAI,CAAC;IACtB,CAAC,CACF;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAAY,QAAA,EAKI,OAAOP,WAAW,CAACQ,UAAU,IAAI,WAAW,gBAC5Cb,OAAA;MAAAY,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,GAEjBZ,WAAW,CAACQ,UAAU,CAACK,GAAG,CAAC,CAACC,QAAQ,EAAEC,CAAC,kBACrCpB,OAAA,CAAAE,SAAA;MAAAU,QAAA,gBACEZ,OAAA;QAAAY,QAAA,EAAcO,QAAQ,CAACE;MAAI,GAAlBD,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAwB,eAClCjB,OAAA;QAAAY,QAAA,EAAW;MAAW,GAAdQ,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAiB,eAC1BjB,OAAA;QAAAY,QAAA,GAAaO,QAAQ,CAACG,OAAO,EAAE,GAAC;MAAA,GAAxBF,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAA2B,eACpCjB,OAAA;QAAAY,QAAA,GAAaO,QAAQ,CAACI,IAAI,EAAE,IAAE,EAAEJ,QAAQ,CAACK,KAAK,EAAE,GAAC,EAAEL,QAAQ,CAACM,OAAO;MAAA,GAA3DL,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAgE;IAAA,gBAE5E;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEG;AAEV,CAAC;AAAAb,EAAA,CAnCGD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAqCP,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}